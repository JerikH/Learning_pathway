#lang racket
(define vec1 (make-vector (random 0 101)))
(define (bucle cont)
  (if (< cont (vector-length vec1))
      (begin
        (vector-set! vec1 cont (random 10))
        (bucle (+ cont 1))
      )
      (void) 
  )
)
(define (contador sec ce u d t cu ci se si o n)
  (if (< sec (vector-length vec1))
      (begin
        (if (= (vector-ref vec1 sec) 0)
            (contador (+ sec 1) (+ ce 1) u d t cu ci se si o n)
            (if (= (vector-ref vec1 sec) 1)
                (contador (+ sec 1) ce (+ u 1) d t cu ci se si o n)
                (if (= (vector-ref vec1 sec) 2)
                    (contador (+ sec 1) ce u (+ d 1) t cu ci se si o n)
                    (if (= (vector-ref vec1 sec) 3)
                        (contador (+ sec 1) ce u d (+ t 1) cu ci se si o n)
                        (if (= (vector-ref vec1 sec) 4)
                            (contador (+ sec 1) ce u d t (+ cu 1) ci se si o n)
                            (if (= (vector-ref vec1 sec) 5)
                                (contador (+ sec 1) ce u d t cu (+ ci 1) se si o n)
                                (if (= (vector-ref vec1 sec) 6)
                                    (contador (+ sec 1) ce u d t cu ci (+ se 1) si o n)
                                    (if (= (vector-ref vec1 sec) 7)
                                        (contador (+ sec 1) ce u d t cu ci se (+ si 1) o n)
                                        (if (= (vector-ref vec1 sec) 8)
                                            (contador (+ sec 1) ce u d t cu ci se si (+ o 1) n)
                                            (if (= (vector-ref vec1 sec) 9)
                                                (contador (+ sec 1) ce u d t cu ci se si o (+ n 1))
                                                (contador (+ sec 1) ce u d t cu ci se si o n)
                                            )    
                                        )
                                    )    
                                )
                            )
                        )
                    )
                )
            )
        )
      )
      (begin
        (display "La cantidad de números cero(0) en el vector es: ")
        (displayln ce)
        (display "La cantidad de números uno(1) en el vector es: ")
        (displayln u)
        (display "La cantidad de números dos(2) en el vector es: ")
        (displayln d)
        (display "La cantidad de números tres(3) en el vector es: ")
        (displayln t)
        (display "La cantidad de números cuatro(4) en el vector es: ")
        (displayln cu)
        (display "La cantidad de números cinco(5) en el vector es: ")
        (displayln ci)
        (display "La cantidad de números seis(6) en el vector es: ")
        (displayln se)
        (display "La cantidad de números siete(7) en el vector es: ")
        (displayln si)
        (display "La cantidad de números ocho(8) en el vector es: ")
        (displayln o)
        (display "La cantidad de números nueve(9) en el vector es: ")
        (displayln n)
        (display "La cantidad de números es ")
        (displayln (+ ce u d t cu ci se si o n))
      )
  )
)
(bucle 0)
(contador 0 0 0 0 0 0 0 0 0 0 0)
(displayln "El vector es: ")
(displayln vec1)